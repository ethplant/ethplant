{"version":3,"sources":["LoadingBar.js","config.js","util.js","PlantFeature.js","PlantGridUnit.js","PlantGrid.js","ts.js","OverlayPhoto.js","Album.js","Plant.js","Navigation.js","App.js","serviceWorker.js","index.js"],"names":["LoadingBar","props","show","id","className","type","color","height","width","VideoPrefix","VideoServer","playRemote","name","videoId","undefined","pc","RTCPeerConnection","sdpSemantics","addTransceiver","direction","ontrack","event","el","document","createElement","track","kind","srcObject","streams","autoplay","controls","muted","setAttribute","getElementById","appendChild","createOffer","then","offer","setLocalDescription","console","log","JSON","stringify","fetch","method","headers","body","res","json","setRemoteDescription","catch","alert","l","PlantFeature","useState","feature","setFeature","useEffect","result","error","featureHtml","featureUnit","push","style","library","add","faEye","PlantGridUnit","priceHtml","setName","owner","setOwner","price","setPrice","listSell","setListSell","listSellPrice","setListSellPrice","changeRow","setChangeRow","isLoading","setIsLoading","tokenId","nft","buyNFT","a","once","i_tokenId","buy","value","parseInt","ownerOf","own","ethers","utils","parseEther","toString","priceWei","setForSale","cancelSale","nftName","getSale","account","key","step","min","onChange","target","Button","variant","onClick","sellNFT","cancelSell","ethHtml","formatUnits","plantPath","to","icon","substring","length","PlantGrid","totalSupply","setTotalSupply","i","childCall","items","parent","ts2time","unixTs","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","ts2date","mon","getMonth","day","getDate","getFullYear","OverlayPhoto","current","setCurrent","preHtml","handlePrevious","nextHtml","handleNext","handleClose","src","description","prefix","suffix","Album","React","forwardRef","ref","photoTsAry","setPhotoTsAry","setUpdateTs","showOverlayPhoto","setShowOverlayPhoto","photoCurrentTs","setPhotoCurrentTs","showPhoto","phototTs","split","tsAry","fSplit","ts","sort","b","useImperativeHandle","addPhoto","newPhoto","dateStr","hasOwnProperty","newArray","concat","cleanValue","now","tmpDatePhotoDic","preDate","datePhotoAry","NaN","Array","datePhotosHtml","photoUrl","String","photoCurrentTsIdx","indexOf","timezone","datetime","Intl","DateTimeFormat","resolvedOptions","timeZone","ts2datetime","currentUrl","preFunc","nextFunc","displayName","faCamera","Plant","setTokenId","albumRef","useRef","useParams","postUrl","rawResponse","nftID","nftId","takePhoto","Navigation","Navbar","collapseOnSelect","expand","bg","Brand","as","Link","Toggle","aria-controls","Collapse","Nav","NavItem","eventkey","href","provider","signer","window","ethereum","autoRefreshOnNetworkChange","web3","enable","providers","Web3Provider","e","JsonRpcProvider","getSigner","Contract","PlantNFT","abi","getAddress","response","App","isInfo","setAccount","InfoAlert","Alert","position","top","exact","path","children","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b0f2416c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactLoading from 'react-loading';\nimport './css/LoadingBar.scss';\nexport default function LoadingBar(props){ \n    if (!props.show) return null;\n    return (\n        <div id=\"overlay\">\n            <div className=\"w-100 d-flex justify-content-center align-items-center\">\n                <ReactLoading type={\"bars\"} color={\"#fff\"} height={'20%'} width={'20%'} />\n            </div>\n        </div>\n        \n    );\n};","export const EthProvider = \"http://192.168.0.56:7545\"; //\"http://192.168.0.117:7545\";\nexport const VideoServer = \"https://192.168.0.56:8080\"; //\"http://192.168.0.117:8080\";\nexport const VideoPrefix = VideoServer + \"/@\";","import {VideoPrefix} from \"./config.js\" \n\nexport function playRemote(name, videoId){\n    if (name=='' || name ==undefined){\n        return;\n    }\n    let pc = new RTCPeerConnection({ sdpSemantics : \"unified-plan\" })\n    // let pc = new RTCPeerConnection ({ sdpSemantics : \"plan-b\" });\n    // pc.addTransceiver('video')\n    // pc.addTransceiver('video')\n    pc.addTransceiver('video', {direction: \"recvonly\"})\n\n    pc.ontrack = function (event) {\n        var el = document.createElement(event.track.kind)\n        el.srcObject = event.streams[0]\n        el.autoplay = true\n        el.controls = true\n        el.muted = true\n        el.setAttribute('autoplay', '');\n        el.setAttribute('muted', '');\n        el.setAttribute('playsInline', '');\n\n        el.className = \"videoFull\"\n        // document.getElementById(name + 'Video').appendChild(el)\n        document.getElementById(videoId).appendChild(el)\n    }\n\n    pc.createOffer()\n    .then(offer => {\n        pc.setLocalDescription(offer)\n        console.log(\"offer:\");\n        console.log(JSON.stringify(offer));\n        return fetch(VideoPrefix + name +'/video', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(offer)\n        })\n    })\n    .then(res => {\n        console.log(`res:`);\n        console.log(res);\n        return res.json();\n    })\n    .then(res => pc.setRemoteDescription(res))\n    .catch(alert)\n}\n\n/*\nasync function playRemote(name){\n    let pc = new RTCPeerConnection()\n    pc.addTransceiver('video')\n\n    pc.ontrack = function (event) {\n        var el = document.createElement(event.track.kind)\n        el.srcObject = event.streams[0]\n        el.autoplay = true\n        el.controls = true\n        el.muted = true\n\n        document.getElementById(name + 'Video').appendChild(el)\n    }\n\n\n\n    let offer =  await pc.createOffer()\n    l(\"offer:\" + JSON.stringify(offer));\n    const postUrl = \"http://localhost:8080/@\" + name + \"/video\"; // \"/photo/take\";//name + \"/video\";\n    const rawResponse = await fetch(postUrl, {\n        method: 'POST',\n        headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(offer)//JSON.stringify({\"name\":\"adam\", \"action\":\"takephoto\", \"sign_data\":\"\"}) //JSON.stringify(offer)\n    });\n    const res = await rawResponse.json();\n    l(\"res:\" + res);\n}*/","import React, { useState, useEffect } from 'react';\nconst l = console.log;\n\nexport const PlantFeature = (props) => {\n    const [feature, setFeature] = useState([]);\n    useEffect(() => {\n        fetchFeature(props.name)\n    }, [props.name]);\n\n    function fetchFeature(name) {\n        let jsonURL = \"/data/\" + name + \".json\";\n        fetch(jsonURL)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                setFeature(result['features'])\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                l(\"fetchFeature error: \", + error)\n            }\n        )\n    }\n\n    let featureHtml = [];\n    for (const featureUnit of feature) {\n        featureHtml.push(<li>{featureUnit}</li>);\n    }\n\n    return(\n        <ul style={{\"padding-left\": \"0rem\"}}>\n            {featureHtml}\n        </ul>\n    )\n\n}","import React, { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\n\nimport LoadingBar from './LoadingBar'\n// bootstrap\nimport Button from 'react-bootstrap/Button';\n// router\nimport {Link} from \"react-router-dom\";\n// fontawesome\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEye } from '@fortawesome/free-solid-svg-icons'\nimport { playRemote } from './util.js';\nimport { PlantFeature } from './PlantFeature';\n//css\nimport './css/PlantGridUnit.scss';\n\nlibrary.add(faEye)\n\nconst l = console.log;\n\nconst PlantGridUnit = (props) => {\n    const [name, setName] = useState('');\n    const [owner, setOwner] = useState('0x');\n    const [price, setPrice] = useState(0);\n    const [listSell, setListSell] = useState(false);\n    const [listSellPrice, setListSellPrice] = useState(0);\n    const [changeRow, setChangeRow] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    // const [renderIt, setRenderIt] = useState(false);\n    // const [, updateState] = React.useState();\n    let tokenId = props.id; // token id\n    let nft = props.nft;\n    let  videoId = name + \"Video\";\n    useEffect(() => {\n        l('in useEffect(), id:' +props.id);\n        \n        nft.nftName(tokenId).then(nftName => {\n            setName(nftName);\n        });\n\n        nft.ownerOf(tokenId).then(own => {\n            setOwner(own);\n        });\n\n        nft.getSale(tokenId).then(price => {\n            setPrice(price);\n        });\n\n\n        // Update the document title using the browser API\n        return function cleanup() {\n          l('in PlantItem cleanup(), id:' +props.id);\n        };\n    }, [owner]);\n\n    useEffect(() => {\n        playRemote(name, videoId);\n    }, [name]);\n    \n    async function buyNFT() {\n        await nft.once(\"NFTBuyEvent\", (i_tokenId) => {\n            l(\"in NFTBuyEvent FIRST:, i_tokenId:\" + i_tokenId);\n        });\n        setIsLoading(true);\n        try {\n            await nft.buy(tokenId, {value: price});\n        }catch (error) {   \n            console.log(\"Buy error:\" + error);\n            setIsLoading(false);\n        }  \n        await nft.once(\"NFTBuyEvent\", (i_tokenId) => {\n            l(\"in NFTBuyEvent\");\n            if (parseInt(i_tokenId)===tokenId){\n                nft.ownerOf(tokenId).then(own => {\n                    setOwner(own);\n                });\n                setIsLoading(false);\n            }\n        });\n        \n    }\n    \n    async function sellNFT() {\n        // try to ignore the event\n        await nft.once(\"NFTSellEvent\", (i_tokenId, price) => {\n            l(\"in NFTSellEvent FIRST:, i_tokenId:\" + i_tokenId + \", price:\" + price);\n        });\n\n        let priceWei = await ethers.utils.parseEther(listSellPrice.toString());\n        // l(\"Sell Price: \" + price+ \", priceWei:\" + priceWei);\n        setIsLoading(true);\n        try {\n            await nft.setForSale(tokenId, priceWei);\n        } catch (error) {   \n            console.log(\"Sale error:\" + error);\n            setListSell(false);\n            setChangeRow(false);\n            setIsLoading(false);\n        }\n\n        await nft.once(\"NFTSellEvent\", (i_tokenId, price) => {\n            l(\"in NFTSellEvent:, i_tokenId:\" + i_tokenId + \", price:\" + price);\n\n            if (parseInt(i_tokenId)===tokenId){\n                setPrice(price);\n                setListSell(false);\n                setChangeRow(false);\n                setIsLoading(false);\n            }\n        });\n        \n    }\n    \n    async function cancelSell() {\n        await nft.once(\"NFTSellEvent\", (i_tokenId, price) => {\n            l(\"in cancelSell NFTSellEvent FIRST:, i_tokenId:\" + i_tokenId + \", price:\" + price);\n        });\n        setIsLoading(true);\n\n        try {\n            await nft.cancelSale(tokenId);\n        }catch (error) {   \n            console.log(\"cancelSale error:\" + error);\n            setListSell(false);\n            setChangeRow(false);\n            setIsLoading(false);\n        }  \n        \n        await nft.once(\"NFTSellEvent\", (i_tokenId, price) => {\n            if (parseInt(i_tokenId)===tokenId){\n                setPrice(price);\n                setListSell(false);\n                setChangeRow(false);\n                setIsLoading(false);\n            }\n        });\n        \n    }\n\n    var priceHtml;\n    // l(\"unit id(%d) owener:%s, props.account:%s\", tokenId, owner, props.account);\n    // l(\" type(owener):%s, props.account:%s\", typeof(owner), typeof(props.account));\n    if (owner===props.account){\n        // ------------ the item belong owner ------------ //\n        if (listSell){\n            priceHtml = [\n                <div key=\"0\" className=\"row list-sell\"> \n                    <input type=\"number\" step=\"0.01\" min=\"0\" \n                           id=\"sellprice\" name=\"sellprice\" onChange={event => setListSellPrice(event.target.value)}/>\t\n                    <Button className=\"sellbtn\" variant=\"danger\" onClick={() => sellNFT(false)}>Sell</Button>          \n                    <Button className=\"close\" variant=\"secondary\" onClick={() => setListSell(false)}>X</Button>\n                </div>];\n\n        } else if (price > 0){\n            if (!changeRow){\n                let formattedBalance = ethers.utils.formatUnits(price, 18);\n                let ethHtml = \"Ξ \" + formattedBalance;\n                priceHtml = [<div key=\"0\" className=\"row\"> \n                                    <div className=\"col-5 price\">{ethHtml}</div>\n                                    <div className=\"col-7 price-btn\">\n                                        <Button variant=\"outline-warning\" onClick={() => setChangeRow(true)}>Change</Button>\n                                    </div>\n                            </div>];\n            }else{\n                priceHtml = [\n                    <div className=\"row change-price-row\"> \n                        <Button className=\"change-price\" variant=\"danger\" onClick={() => setListSell(true)}>Price</Button>          \n                        <Button className=\"revoke-sale\" variant=\"secondary\" onClick={() => cancelSell()}>Revoke</Button>\n                        <Button className=\"close\" variant=\"secondary\" onClick={() => setChangeRow(false)}>X</Button>\n                    </div>];\n            }\n        }else{\n            // l(\"in owner==props.account else, should price <= 0\");\n            priceHtml = [<div key=\"0\" className=\"row\"> \n                            <div className=\"col-5 price\">No Sale</div>\n                            <div className=\"col-7 price-btn\">\n                                <Button variant=\"outline-danger\" onClick={() => setListSell(true)}>List Sell</Button>\n                            </div>\n                        </div>];\n            \n        }\n    }else{\n        // ------------ the item is NOT belong owner ------------ //\n        if (price > 0){\n            let formattedBalance = ethers.utils.formatUnits(price, 18);\n            let ethHtml = \"Ξ \" + formattedBalance;\n            priceHtml = [<div key=\"0\" className=\"row\"> \n                                <div className=\"col-5 price\">{ethHtml}</div>\n                                <div className=\"col-7 buy-btn-row\">\n                                    <Button variant=\"success\" onClick={async () => {await buyNFT();} }>Buy</Button>\n                                </div>\n                        </div>];\n        \n        }else{\n            priceHtml = \"No Sale\";\n        }\n    }\n    const plantPath = \"/@\" +name;\n   \n    return (\n\n    <div className=\"col-md-4 col-sm-6\">\n        <LoadingBar show={isLoading} />\n        <div className=\"item\">\n            <div className=\"title\">{name}</div>\n            <div id={videoId} className=\"imgbox\">\n                {/* <img src={props.img} alt=\"\" />   */}\n            </div>\n            {/* <div className=\"lookit\" onClick={() => props.parent(tokenId)}><FontAwesomeIcon icon={[\"fas\", \"eye\"]} /> <b className=\"fakehref\">Look it!</b></div> */}\n            <div className=\"lookit-div\"><Link className=\"lookit\" to={plantPath}><FontAwesomeIcon icon={[\"fas\", \"eye\"]} /> <b className=\"fakehref\">Look it!</b></Link></div>\n            <div className=\"row\">\n                <div className=\"col-4 col-name\">Owner</div>\n                <div className=\"col-8\">{owner.substring(0,6) + \"...\" + owner.substring(owner.length-4, owner.length)}</div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-4 col-name\">Feature</div>\n                <div className=\"col-8\">\n                    <PlantFeature name={name} />\n                </div>\n            </div>\n            <div className=\"row price-row\">\n                <div className=\"col-4 col-name\">Price</div>\n                <div className=\"col-8\">\n                    {priceHtml}\n                </div>\n            </div>\n        </div>\n    </div>\n    );\n};\n\nexport default PlantGridUnit;","import React, { useState, useEffect } from 'react';\nimport PlantGridUnit from \"./PlantGridUnit\"\n\nconst l = console.log;\n\nconst PlantGrid = (props) => {\n    const [totalSupply, setTotalSupply] = useState(0);\n    let nft = props.nft;\n    let account = props.account;\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        l('in PlantGrid useEffect(), nft:', nft);\n        if (nft!=null){\n            nft.totalSupply().then(totalSupply => {\n                l(\"totalSupply:\" , totalSupply);\n                setTotalSupply(totalSupply);\n            });\n        }\n        // Update the document title using the browser API\n        return function cleanup() {\n          l('in useEffect cleanup()');\n        };\n    }, [nft]);\n\n    const childCall = (tokenId) => {\n        l(\"PlantGrid childcall tokenId:\" + tokenId);\n    };\n    l(\"grid, account:%s\", account);\n    var i;\n    const items = [];\n    for (i = 0; i < totalSupply; i++) {\n        items.push(<PlantGridUnit key={i} id={i} nft={nft} account={account} parent={childCall} />);\n    }\n\n    return(\n        <div className=\"row gallery\">\n            {items}\n        </div>\n    );\n};\n\nexport default PlantGrid;\n","export function ts2time(unixTs){\n  var date = new Date(unixTs * 1000);\n\n  var hours = \"0\" +date.getHours();\n  var minutes = \"0\" + date.getMinutes();\n  var seconds = \"0\" + date.getSeconds();\n  \n  return `${hours.substr(-2)}:${minutes.substr(-2)}:${seconds.substr(-2)}`;\n\n}\n\nexport function ts2date(unixTs){\n    var date = new Date(unixTs * 1000);\n  \n    var mon = \"0\" + (date.getMonth()+1);\n    var day = \"0\" + date.getDate();\n    return `${date.getFullYear()}-${mon.substr(-2)}-${day.substr(-2)}`;\n}\n\nexport function ts2datetime(unixTs, timezone=false){\n    let datetime = `${ts2date(unixTs)} ${ts2time(unixTs)}`;\n    datetime = timezone ? datetime + ` (${Intl.DateTimeFormat().resolvedOptions().timeZone})` : datetime;\n    return datetime;\n}\n// let ts = 1603163299;\n// console.log(ts2date(ts));\n// console.log(ts2datetime(ts));\n// console.log(ts2(1549312452));\n// console.log(date.toString());","import React, { useState, useEffect } from 'react';\nimport './css/OverlayPhoto.css';\nconst l = console.log;\n// export default function OverlayPhoto(props){ \n// const OverlayPhoto = (props, ref) => {\nconst OverlayPhoto = (props) => {\n    const [current, setCurrent] = useState(\"\");\n\n    useEffect(() => {\n        setCurrent(props.current);\n    }, [props]);\n    if (!props.show) return null;\n    let preHtml = props.handlePrevious!=null ? \n                <div className=\"overlay-arrow\" onClick={props.handlePrevious} ><h1>&lt;</h1></div> : \n                <div className=\"overlay-arrow\" /> ;\n    let nextHtml = props.handleNext!=null ? \n                <div className=\"overlay-arrow\" onClick={props.handleNext} ><h1>&gt;</h1></div> : \n                <div className=\"overlay-arrow\" /> ;\n     \n    return(\n        <div id=\"myNav\" className=\"overlay\">\n            <h1 className=\"closebtn\" onClick={props.handleClose}>&times;</h1>\n            {/* <div className=\"closebtn\" onClick={props.handleClose}>&times;</div> */}\n            <div className=\"overlay-content\">\n                {preHtml}\n                <div className=\"overlay-photo\">\n                    <img src={current} />\n                    <div className=\"date\">{props.description}</div>\n                </div>\n                {nextHtml}\n            </div>\n        </div>\n    );\n};\n\n\nexport default OverlayPhoto;\n","import React, { useState, useEffect, useImperativeHandle } from 'react';\n// util\nimport { ts2date, ts2datetime } from './ts.js';\nimport './css/Album.scss';\nimport OverlayPhoto from \"./OverlayPhoto.js\"\nconst l = console.log;\n\nvar prefix = \"\";\nvar suffix = \"\";\n\n// const Album =  forwardRef((props, ref) => {\nvar Album = React.forwardRef((props, ref) => {\n    const [photoTsAry, setPhotoTsAry] = useState([]);\n    const [, setUpdateTs] = useState();\n    const [showOverlayPhoto, setShowOverlayPhoto] = useState(false);\n    const [photoCurrentTs, setPhotoCurrentTs] = useState(0);\n\n    const forceUpdate = () => {\n        // l(\"in forceUpdate:\");\n        // l(photoTsAry);\n        setUpdateTs(Date.now());\n    };\n    let { name } = props;\n\n    useEffect(() => {\n        // l('in album useEffect(), name=', name);\n        fetchPhotoList()\n        \n        return function cleanup() {\n          l('in Album(%s) cleanup()', name);\n        };\n    }, [name]);\n\n    useImperativeHandle(ref, () => ({\n\n        addPhoto: (newPhoto) => {\n            if (!newPhoto['success']){\n                console.error(\"Add photo error, err:\" + newPhoto['detail']);\n                return ;\n            }\n\n            let fSplit = newPhoto['detail'].split('.');\n            let ts = parseInt(fSplit[0]);\n            let dateStr = ts2date(ts);\n            if (!photoTsAry.hasOwnProperty(dateStr)){\n                photoTsAry[dateStr] = [];\n            }\n            \n            const newArray = [ts].concat(photoTsAry);\n            setPhotoTsAry(newArray);\n            return {\n                cleanValue: forceUpdate()\n            }\n        }\n    \n    }));\n\n    function fetchPhotoList() {\n        fetch(\"http://localhost:8080/@\" + name + \"/photo/list\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                if (result['photos'].length <=0){\n                    return;\n                }\n                suffix = result['photos'][0].split('.')[1];\n                prefix = result['prefix'];\n                let datePhoto = [];\n                let  tsAry = [];\n                for (const f of result['photos']) {\n                    let fSplit = f.split('.');\n                    let ts = parseInt(fSplit[0]);\n                    tsAry.push(ts);\n                }\n                // descending\n                tsAry.sort(function(a, b){return b-a});\n                setPhotoTsAry(tsAry);\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                // setIsLoaded(true);\n                // setError(error);\n                l(error);\n            }\n        )\n    }\n\n    function showPhoto(phototTs){\n        setPhotoCurrentTs(phototTs);\n        setShowOverlayPhoto(true);\n    }\n\n    // array to map\n    let tmpDatePhotoDic = {};\n    let preDate = \"\";\n    var datePhotoAry = NaN;\n    for (let i = 0; i < photoTsAry.length; i++) {\n        let ts = photoTsAry[i];\n        let dateStr = ts2date(ts);\n        // l(dateStr);\n        if (dateStr!==preDate){\n            datePhotoAry = new Array();\n            // tmpDatePhotoDic.set(dateStr, datePhotoAry);\n            tmpDatePhotoDic[dateStr] = datePhotoAry;\n            preDate = dateStr;\n        }\n        // let photoUrl = prefix + String(ts) + \".\" + suffix;\n        datePhotoAry.push(ts);\n    }\n\n    // prepare datePhotosHtml\n    let datePhotosHtml = [];\n    for (var dateStr in tmpDatePhotoDic) {\n        datePhotosHtml.push( <div key={dateStr} className=\"caption\">{dateStr}</div>)\n        \n        for (const ts of tmpDatePhotoDic[dateStr]) {\n            // console.log(dateStr + \" -> \" + url);\n            let photoUrl = prefix + String(ts) + \".\" + suffix;\n            datePhotosHtml.push( <img key={ts} className=\"photo\" src={photoUrl} onClick={() => showPhoto(ts)}  />)\n        }\n    }\n\n    // for OverlayPhoto\n    let photoCurrentTsIdx = photoCurrentTs > 0 ? photoTsAry.indexOf(photoCurrentTs):0;\n    let description= photoCurrentTs > 0 ? ts2datetime(photoCurrentTs, true) : \"\";\n    let currentUrl = photoCurrentTs > 0 ? (prefix + String(photoCurrentTs) + \".\" + suffix)  : \"\";\n    let preFunc = (photoCurrentTsIdx>0) ?  () => showPhoto( photoTsAry[photoCurrentTsIdx-1] )  : null;\n    let nextFunc = (photoCurrentTsIdx < (photoTsAry.length-1))  ?  () => showPhoto(photoTsAry[photoCurrentTsIdx+1] )  : null;\n    return (\n        <>\n        <div className=\"album\"> {datePhotosHtml} </div>\n        <OverlayPhoto show={showOverlayPhoto} handleClose={() => setShowOverlayPhoto(false)}\n                    current={currentUrl}\n                    handlePrevious={preFunc} \n                    handleNext={nextFunc}\n                    description={description} />\n        </>\n    )\n});\nAlbum.displayName = 'Album';\nexport default Album;","import React, { useState, useEffect, useRef } from 'react';\nimport {useParams} from \"react-router-dom\";\nimport LoadingBar from './LoadingBar'\nimport Album from './Album';\n\n\n// fontawesome\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCamera } from '@fortawesome/free-solid-svg-icons'\nimport { playRemote } from './util.js';\nimport {VideoPrefix} from \"./config.js\" \n\nimport { PlantFeature } from './PlantFeature';\nlibrary.add(faCamera)\n\nconst l = console.log;\n\nconst Plant = (props) => {\n    // react\n    const [tokenId, setTokenId] = useState(-1);\n    const [owner, setOwner] = useState('0x');\n    const [isLoading, setIsLoading] = useState(false);\n    const [feature, setFeature] = useState([]);\n    const albumRef = useRef();\n    // react-router\n    let { name } = useParams();\n    \n    let nft = props.nft;\n    let  videoId = name + \"Video\";\n    useEffect(() => {\n        l('in useEffect(), nft:' +nft);\n        if (nft!=null){\n            nft.nftID(name).then(nftId => {\n                setTokenId(nftId);\n                nft.ownerOf(nftId).then(own => {\n                    setOwner(own);\n                });\n            });\n        }\n        \n        // Update the document title using the browser API\n        // fetchPhotoList();\n        \n        return function cleanup() {\n          l('in Plant(%d) cleanup()', props.id);\n        };\n    }, [nft]);\n\n    useEffect(() => {\n        playRemote(name, videoId);\n        // fetchFeature(name)\n    }, [name]);\n\n    function fetchFeature(name) {\n        let jsonURL = \"/data/\" + name + \".json\";\n        fetch(jsonURL)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                setFeature(result['features'])\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                l(\"fetchFeature error: \", + error)\n            }\n        )\n    }\n\n    async function takePhoto() {\n        const postUrl = VideoPrefix + name + \"/photo/take\";\n        const rawResponse = await fetch(postUrl, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\"name\":name, \"action\":\"takephoto\", \"sign_data\":\"\"})\n        });\n        const res = await rawResponse.json();\n        albumRef.current.addPhoto(res);\n    }\n    let featureHtml = [];\n    for (const featureUnit of feature) {\n        featureHtml.push(<li>{featureUnit}</li>);\n    }\n    // l(\"Feature:\" + feature);\n    // l(\"featureHtml:\" + featureHtml);\n    \n    return (\n        <div className=\"row gallery\">\n            <div className=\"col-md-1 col-sm-0\" />\n            <div className=\"col-md-10 col-sm-12\">\n                <LoadingBar show={isLoading} />\n                <div className=\"item\">\n                    <div className=\"title\">{name}</div>\n                    <div id={videoId} className=\"imgbox imgbox-169\"> \n                        {/* <img src={props.img} alt=\"\" />   */}\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"plant-cmd-click\" onClick={() => takePhoto()}><FontAwesomeIcon icon={[\"fas\", \"camera\"]} /> <b className=\"fakehref\">Take Picture</b></div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-4 col-lg-2 col-name\">Owner</div>\n                        <div className=\"col-8 col-lg-10\">{owner.substring(0,6) + \"...\" + owner.substring(owner.length-4, owner.length)}</div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-4 col-lg-2 col-name\">Feature</div>\n                        <div className=\"col-8 col-lg-10\">\n                            <PlantFeature name={name} />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-4 col-lg-2 col-name\">Album</div>\n                        <div className=\"col-8 col-lg-10\">\n\n                            <Album name={name} ref={albumRef}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-1 col-sm-0\" />\n        </div>\n\n    );\n\n};\n\nexport default Plant;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport \"./css/navagation.css\"\n// export default Navigation = (props) => {\nexport default function Navigation() {\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" >\n        <Navbar.Brand as={Link} to=\"/\" >ethplant.com</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavItem eventkey={1} href=\"/\">\n                  <Nav.Link as={Link} to=\"/\" >Home</Nav.Link>\n            </NavItem>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n};","import React, { useState, useEffect} from 'react';\n// bootstrap\nimport Alert from 'react-bootstrap/Alert';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import './App.css';\nimport './css/app.scss';\n// contract\nimport { ethers } from \"ethers\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport PlantNFT from \"./contracts/PlantNFT.json\";\n// import PlantItem from \"./PlantItem\"\nimport PlantGrid from \"./PlantGrid\"\nimport Plant from \"./Plant\"\nimport Navigation from \"./Navigation\"\nimport {EthProvider} from \"./config.js\"\n\nconst l = console.log;\n// const WebName = \"ethplant.com\";\nconst contractAddress ='0xBCa4cE7CcF8D70332fdb5717f39f2971c8109874';\n// account (metamask)\nlet provider;\nlet signer;\nlet noProviderAbort = true;\nlet nft;\nlet account;\n\nl(\"window.ethereum:\" );\nl(window.ethereum);\n\nif (window.ethereum!=undefined){\n    window.ethereum.autoRefreshOnNetworkChange = false;\n}\n\n\nif (typeof window.ethereum !== 'undefined' || (typeof window.web3 !== 'undefined')) {\n    try{\n        // Ethers.js set up, gets data from MetaMask and blockchain\n        window.ethereum.enable().then(\n            provider = new ethers.providers.Web3Provider(window.ethereum)\n        );\n          \n    } catch(e) {\n        noProviderAbort = true;\n    }\n}else{\n    provider = new ethers.providers.JsonRpcProvider(EthProvider);\n    // web3 = new Web3(provider);\n}\n\n\nif (provider!=null){\n    signer = provider.getSigner();\n    nft = new ethers.Contract(contractAddress, PlantNFT.abi, signer);\n    // setNFT(inft);\n    noProviderAbort = false;\n    signer.getAddress().then(response => {\n        // setAccount(response);\n        account = response;\n    });\n}\n\n\n// const App = ()  => {\nfunction App() {\n    const [isInfo, setIsInfo] = useState(false);\n    // const [nft, setNFT] = useState(null);\n    const [account, setAccount] = useState('0x');\n    // Aborts app if metamask etc not present\n    useEffect(() => {\n        l('App() in useEffect()');\n        // Ensures metamask or similar installed\n        // setNFT(inft);\n        setAccount(account);\n    }, [account]);\n\n    // if (noProviderAbort) {\n    //     return (\n    //         <div>\n    //         <h1>Error</h1>\n    //         <p><a href=\"https://metamask.io\">Metamask</a> or equivalent required to access this page.</p>\n    //         </div>\n    //     );\n    // }\n\n    // Notification to user that transaction sent to blockchain\n    const InfoAlert = () => {\n        if (!isInfo) return null;\n        return (\n            <Alert key=\"info\" variant=\"info\" \n            style={{position: 'absolute', top: 0}}>\n            MSG\n            </Alert>\n        );\n    };\n\n    l(\"in App, account: \", account);\n  \n    return (\n    <Router>\n        <InfoAlert />\n        \n        <div className=\"app\">\n            <div className=\"container\">\n            <Navigation />\n\n            <Switch>\n                <Route exact path=\"/\">\n                    <PlantGrid nft={nft} account={account} />\n                </Route>\n                <Route path=\"/@:name\" children={<Plant nft={nft} account={account} />} />      \n            </Switch>\n                  \n            </div>\n        </div>\n    </Router>\n);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}